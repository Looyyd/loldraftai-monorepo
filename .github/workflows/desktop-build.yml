name: Build Desktop App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    # Skip release creation for pull requests
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

      - name: Check for changes
        id: check-changes
        run: |
          if npx turbo-ignore @draftking/desktop; then
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi


      - name: Install Wine
        if: steps.check-changes.outputs.should_build == 'true'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y wine64 wine32:i386

      - name: Build Desktop App
        if: steps.check-changes.outputs.should_build == 'true'
        run: yarn turbo run build --filter=@draftking/desktop...
        env:
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: ${{ secrets.TURBO_TEAM }}


      - name: Upload to R2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-changes.outputs.should_build == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        working-directory: apps/desktop
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Common AWS CLI options
          AWS_OPTS="--endpoint-url https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com --region auto --content-type application/octet-stream --no-verify-ssl"
          
          # Upload files with increased retries and timeout
          aws configure set default.s3.max_concurrent_requests 1
          aws configure set default.s3.multipart_threshold 64MB
          aws configure set default.s3.multipart_chunksize 16MB
          aws configure set default.retry.mode adaptive
          aws configure set default.retry.max_attempts 5
          
          # Upload the files
          aws s3 cp dist/LoLDraftAI-${VERSION}-Setup.exe \
            s3://${{ secrets.R2_BUCKET_NAME }}/latest/LoLDraftAI-${VERSION}-Setup.exe \
            $AWS_OPTS

          aws s3 cp dist/LoLDraftAI-${VERSION}-Setup.exe.blockmap \
            s3://${{ secrets.R2_BUCKET_NAME }}/latest/LoLDraftAI-${VERSION}-Setup.exe.blockmap \
            $AWS_OPTS

          # Create and upload latest.yml
          echo "version: ${VERSION}
          files:
            - url: LoLDraftAI-${VERSION}-Setup.exe
              sha512: $(sha512sum dist/LoLDraftAI-${VERSION}-Setup.exe | awk '{print $1}')
              size: $(stat -c%s dist/LoLDraftAI-${VERSION}-Setup.exe)
            - url: LoLDraftAI-${VERSION}-Setup.exe.blockmap
              sha512: $(sha512sum dist/LoLDraftAI-${VERSION}-Setup.exe.blockmap | awk '{print $1}')
              size: $(stat -c%s dist/LoLDraftAI-${VERSION}-Setup.exe.blockmap)
          path: LoLDraftAI-${VERSION}-Setup.exe
          sha512: $(sha512sum dist/LoLDraftAI-${VERSION}-Setup.exe | awk '{print $1}')
          releaseDate: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")" > dist/latest.yml

          # Upload latest.yml
          aws s3 cp dist/latest.yml \
            s3://${{ secrets.R2_BUCKET_NAME }}/latest/latest.yml \
            --endpoint-url https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --no-verify-ssl \
            --region auto \
            --content-type application/yaml

          # Keep the "latest" copies for direct downloads
          aws s3 cp dist/LoLDraftAI-${VERSION}-Setup.exe \
            s3://${{ secrets.R2_BUCKET_NAME }}/latest/LoLDraftAI.Setup.exe \
            --endpoint-url https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --no-verify-ssl \
            --region auto \
            --content-type application/octet-stream

          aws s3 cp dist/LoLDraftAI-${VERSION}-Setup.exe.blockmap \
            s3://${{ secrets.R2_BUCKET_NAME }}/latest/LoLDraftAI.Setup.exe.blockmap \
            --endpoint-url https://${{ secrets.CLOUDFLARE_ACCOUNT_ID }}.r2.cloudflarestorage.com \
            --no-verify-ssl \
            --region auto \
            --content-type application/octet-stream